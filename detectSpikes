function [s, t] = detectSpikes(x, Fs)
% Detect spikes.
%   [s, t] = detectSpikes(x, Fs) detects spikes in x, where Fs the sampling
%   rate (in Hz). The outputs s and t are column vectors of spike times in
%   samples and ms, respectively. By convention the time of the zeroth
%   sample is 0 ms.
sigma=median(abs(x)./0.6745); % sigma is the estimated standard deviation 
for i = 1:4
    input=x(:,i); %avoid bugs
    Spiketouch=[1]; % create a recorder of the number of spikes reached the threshold
    N=2; % initial N value, Threshold should be N*sigma
    while Spiketouch~= 0
        Spiketouch=length(input(input<(-N).*sigma(i))); % record # of spikes reached the threshold
        N=N+1; %the N number will keep increasing until no spike reach the threshold.(N-1)*sigma will be the high threshold, 1*sigma will be the low threshold
    end
Threshold(i)=-N/2*sigma(i); % The threshold equals to ((N-1)+1)/2, which is the average value of high and low threshold value.
end
% ------------Julian's method for spikes detection---------
N_elec=size(xx); %determinethe size of the input data
Spikes = zeros(N_elec(1), N_elec(2));%create an array with zeros matching the dimensions of the data matrix
for j = 1:N_elec(2) %go through all four channels
    Pre_Spikes = find(xx(:,j)<=Threshold(j)); %find over threshold indices
    Spikes(Pre_Spikes(1),j)=1;
    for u = 2: length(Pre_Spikes)%go through the whole crossing for one channel
        if xx(Pre_Spikes(u)-1,j)>Threshold(j) && xx(Pre_Spikes(u),j)<=Threshold(j) %check that there is only one crossing per 
            Spikes(Pre_Spikes(u),j) = 1; %put the information of a crossing in a file
        end
    end
end
s=[find(Spikes(:,1)>0);find(Spikes(:,2)>0);find(Spikes(:,3)>0);find(Spikes(:,4)>0)]; % collect the index of the spikes
s=unique(s); % merge the repeated data
t=s./30; %t=s*1000ms/30000HZ
