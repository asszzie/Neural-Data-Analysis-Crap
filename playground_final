%% toy data generation
xx=(x([10000:100000],:));
xx  = gain * double(xx);
% Toy filtering
Fs=samplingRate;
Lpass=300;
Hstop=3000;
fBand=[Lpass/(Fs/2),Hstop/(Fs/2)];% normalization of frequency limits
[b,a]=cheby2(7,50,fBand,'bandpass');
xx=filtfilt(b,a,xx);
% Threshold detection
sigma=median(abs(xx)./0.6745); % sigma is the estimated standard deviation 
for i = 1:4
    input=xx(:,i); %avoid bugs
    Spiketouch=[1]; % create a recorder of the number of spikes reached the threshold
    N=2; % initial N value, Threshold should be N*sigma
    while Spiketouch~= 0
        Spiketouch=length(input(input<(-N).*sigma(i))); % record # of spikes reached the threshold
        N=N+1; %the N number will keep increasing until no spike reach the threshold.(N-1)*sigma will be the high threshold, 1*sigma will be the low threshold
    end
Thre(i)=-N/2*sigma(i); % The threshold equals to ((N-1)+1)/2, which is the average value of high and low threshold value.
end
% Nash's method for spike detection, just for temporal solution, should stick on Julian's code
residual=xx-repmat(Thre,length(xx),1);
residual(residual<0)=-1;
residual(residual>0)=1;
re1=[residual;zeros(1,4)];
re2=[zeros(1,4);residual];
cross=re2-re1;
spikes=[xx;zeros(1,4)];
spikes(cross<=0)=0;
spikes(50002,:)=[];
%%
Tag=[find(spikes(:,1)<0);find(spikes(:,2)<0);find(spikes(:,3)<0);find(spikes(:,4)<0)];
for ti=1:length(Tag)
    waveform(:,:,ti)=xx([Tag(ti):Tag(ti)+29],:);
end
TAG=unique(Tag);
%% Julian's method for spikes detection
N_elec=size(xx); %determinethe size of the input data
Spikes = zeros(N_elec(1), N_elec(2));%create an array with zeros matching the dimensions of the data matrix
for j = 1:N_elec(2) %go through all four channels
    Pre_Spikes = find(xx(:,j)<=Thre(j)); %find over threshold indices
    Spikes(Pre_Spikes(1),j)=1;
    for u = 2: length(Pre_Spikes)%go through the whole crossing for one channel
        if xx(Pre_Spikes(u)-1,j)<Thre(j) %check that there is only one crossing per 
            Spikes(Pre_Spikes(u),j) = 1; %put the information of a crossing in a file
        end
    end
end
%% waveform extraction and spike alignment
Tag=[find(spikes(:,1)<0);find(spikes(:,2)<0);find(spikes(:,3)<0);find(spikes(:,4)<0)];
TAG=unique(Tag);
waveform=zeros(30,1,42,4);
for ch=1:4
    for ti=1:length(TAG)
        peakfind=xx([TAG(ti):TAG(ti)+29],ch);
        waveform(:,:,ti,ch)=xx([TAG(ti)+find(peakfind==min(peakfind))-15:TAG(ti)+find(peakfind==min(peakfind))+14],ch);
        %plot(waveform(:,:,ti,ch))
        %hold on
        %drawnow
    end
end
WAVE=permute(squeeze(waveform),[2,1,3]);
%% PCA
[coeff4,score4,latent]=pca(WAVE(:,:,4));
[coeff3,score3,latent]=pca(WAVE(:,:,3));
[coeff2,score2,latent]=pca(WAVE(:,:,2));
[coeff1,score1,latent]=pca(WAVE(:,:,1));
% in case you want to plot them in 3D
scatter3(score4(:,1),score4(:,2),score4(:,3))
scatter3(score3(:,1),score3(:,2),score3(:,3))
scatter3(score2(:,1),score2(:,2),score2(:,3))
scatter3(score1(:,1),score1(:,2),score1(:,3))
